#include <iostream>

//QuickSort uses pivots and pointers to sort the values around the pivot

//Function swap swaps values at indeces
void swap(int& i, int& j)
{
  int t;
  t = i;
	i = j;
	j = t;
}

//Function partition partitions array at specified value
void partition(int* inArray, int low, int high)
{
	int pivot = arr[high];    // pivot 
  int i = (low - 1);  // Index of smaller element 
  
  for (int j = low; j <= high- 1; j++) 
  { 
    // If current element is smaller than or 
    // equal to pivot 
    if (inArray[j] <= pivot) 
    { 
      i++;    // increment index of smaller element 
      swap(&inArray[i], &inArray[j]); 
    } 
  } 
  swap(&inArray[i + 1], &inArray[high]); 
  return (i + 1); 
}

//Function quickSort does the actual sorting operation
void quickSort(int* inArray, int low, int high)
{
	if (low < high) 
  { 
    int pi = partition(arr, low, high); 
    quickSort(arr, low, pi - 1); 
    quickSort(arr, pi + 1, high); 
  } 
}

//Function displayArray prints out array
void displayArray(int* inArray, int n)
{
  for (int i = 0; i < n; i++)
		std::cout << inArray[i] << " ";
	std::cout << std::endl;
}

//Function main carries out logic flow
int main()
{
  //Input array
	int n = 10;
	int arr[10];
	std::cout << "Input your array to be sorted: ";
	for (int i = 0; i < n; i++)
		std::cin >> arr[i];
	std::cout << "Array before selection sort: ";
	displayArray(arr, n);
	//Sort array
	quickSort(arr, n);
	//Display output
	std::cout << "Array after selection sort: ";
	displayArray(arr, n);
  return 0;
}
